<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://chanhohan.github.io/</id><title>7ULY</title><subtitle>software developer blog</subtitle> <updated>2024-06-29T13:09:17+09:00</updated> <author> <name>Chan Ho Han</name> <uri>https://chanhohan.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://chanhohan.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://chanhohan.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2024 Chan Ho Han </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Publish-Subscribe 패턴에 대해</title><link href="https://chanhohan.github.io/posts/publish-subscribe-pattern/" rel="alternate" type="text/html" title="Publish-Subscribe 패턴에 대해" /><published>2021-08-18T12:10:00+09:00</published> <updated>2021-08-18T13:51:20+09:00</updated> <id>https://chanhohan.github.io/posts/publish-subscribe-pattern/</id> <content src="https://chanhohan.github.io/posts/publish-subscribe-pattern/" /> <author> <name>Chan Ho Han</name> </author> <category term="디자인패턴" /> <summary> 💡 Publish–subscribe pattern 이란? 발행-구독 모델은 비동기 메시징 패러다임입니다. 유튜브 구독으로 생각해 보겠습니다. 유튜브 사용자 X가 유튜버 Y를 구독하겠다고 신청을 하게 되면, 구독이 되는 것을 생각하시면 됩니다. 유튜버 Y가 자신의 구독자들에게 알림을 보낸다면, 중간에 Message Broker가 유튜버 Y의 구독자들에게 알림을 보내기 때문에, 유튜버 Y는 구독자들이 아닌 Message Broker와만 관계를 맺으면 됩니다. 이미지 출처 : microsoft docs 💡 Observer Pattern과 비교 Observer Pattern과 유사하지만, Observer Pattern의 경우에는 observer와 subject가 직접적인 관계를 갖고 있는 것에 반해, ... </summary> </entry> <entry><title>정규표현식 사용해보기</title><link href="https://chanhohan.github.io/posts/regex/" rel="alternate" type="text/html" title="정규표현식 사용해보기" /><published>2021-08-17T05:40:00+09:00</published> <updated>2021-08-17T18:09:49+09:00</updated> <id>https://chanhohan.github.io/posts/regex/</id> <content src="https://chanhohan.github.io/posts/regex/" /> <author> <name>Chan Ho Han</name> </author> <category term="사용기" /> <category term="삽질기" /> <category term="etc" /> <summary> 💡 정규 표현식이란 ? 특정한 규칙을 가진 문자열의 집합을 표현하는 데 사용하는 형식 언어입니다. 💡 여러가지 표현 방법 (메타 문자) ^ 문자열 또는 줄의 시작을 지정합니다. 예를 들어 ^0은 0으로 시작하는 문자열과 일치합니다. [^0]처럼 ^ 문자가 대괄호 안에 들어 있다면, ^는 시작하지 않는다는 뜻입니다. ? 물음표 (?)는 앞에 있는 문자 또는 그룹 0 또는 1개와 일치합니다. For example, 12?3은 123 또는 13과 일치합니다. (…) 괄호는 문자 그룹을 정의하여, 괄호 내 쌍이 그룹을 형성합니다. 이는 이미지 파일 이름에서 정보를 추출할 때 매우 유용합니다. 예를 들어, 이미지들이 Good_0001.png처럼 특정한 이름 지정 규칙을 따랐는데, 이 이미지들만을... </summary> </entry> <entry><title>2021 카카오 채용연계형 인턴십 4번 - 미로 탈출</title><link href="https://chanhohan.github.io/posts/kakao-intern2021-4/" rel="alternate" type="text/html" title="2021 카카오 채용연계형 인턴십 4번 - 미로 탈출" /><published>2021-08-16T05:34:00+09:00</published> <updated>2021-08-16T14:49:39+09:00</updated> <id>https://chanhohan.github.io/posts/kakao-intern2021-4/</id> <content src="https://chanhohan.github.io/posts/kakao-intern2021-4/" /> <author> <name>Chan Ho Han</name> </author> <category term="algorithm" /> <summary> 2021 카카오 채용연계형 인턴십 4번 - 미로 탈출 문제 바로가기 자료구조 그래프 (인접 리스트) 비트마스크 문제 간단 설명 위 그림에서, Start에서 출발하여 End에 도착하기까지의 최단 거리를 구하면 됩니다. Trap을 밟게되면, Trap과 인접한 간선들의 방향이 반대가 됩니다. 풀이 함정을 밟을 수 있는 경우의 수를 모두 기록해 놓습니다. 함정의 갯수의 최대값은 10 이므로 상태는 원래 가능한 상태에 2의 10승인 1024배 만큼 늘어나게 됩니다. 원래 노드의 간선의 최대 갯수는 3000개 이므로 4(= sizeof(int)) * 3000이고, 이것에 함정이 추가된 상태인 1024를 곱하면 약 12MB 정도 되므로, 문제를... </summary> </entry> <entry><title>2021 카카오 채용연계형 인턴십 3번 - 표 편집</title><link href="https://chanhohan.github.io/posts/kakao-intern2021-3/" rel="alternate" type="text/html" title="2021 카카오 채용연계형 인턴십 3번 - 표 편집" /><published>2021-08-16T04:41:00+09:00</published> <updated>2021-08-16T14:39:24+09:00</updated> <id>https://chanhohan.github.io/posts/kakao-intern2021-3/</id> <content src="https://chanhohan.github.io/posts/kakao-intern2021-3/" /> <author> <name>Chan Ho Han</name> </author> <category term="algorithm" /> <summary> 문제 바로가기 자료구조 인덱스 트리(세그먼트 트리) 문제 간단 설명 위 표에서, 파란색 칸은 현재 커서의 위치를 의미합니다. 커서는 위, 아래로 이동할 수 있고 커서가 있는 행을 삭제할 수 있습니다. 가장 최근에 삭제된 행을 원래대로 복구할 수 있습니다. "U X": 현재 선택된 행에서 X칸 위에 있는 행을 선택합니다. "D X": 현재 선택된 행에서 X칸 아래에 있는 행을 선택합니다. "C" : 현재 선택된 행을 삭제한 후, 바로 아래 행을 선택합니다. 단, 삭제된 행이 가장 마지막 행인 경우 바로 윗 행을 선택합니다. "Z" : 가장 최근에 삭제된 행을 원래대로 복구합니다. 단, 현재 선택된 행은 바뀌지 않습니다. 풀이 데이터가 있고, 없고를 1과 0으로 표현할 수... </summary> </entry> <entry><title>2021 삼성SDS 대학생 알고리즘 특강 후기</title><link href="https://chanhohan.github.io/posts/sds-algorithm/" rel="alternate" type="text/html" title="2021 삼성SDS 대학생 알고리즘 특강 후기" /><published>2021-07-17T07:00:00+09:00</published> <updated>2021-08-31T13:33:15+09:00</updated> <id>https://chanhohan.github.io/posts/sds-algorithm/</id> <content src="https://chanhohan.github.io/posts/sds-algorithm/" /> <author> <name>Chan Ho Han</name> </author> <category term="etc" /> <summary> 들어가기 전에 오랜만에 하는 포스팅이네요 ㅎㅎㅎ 작년에도 지원했지만 아쉽게(?) 떨어졌던 삼성SDS 대학생 알고리즘 특강을 이번에 듣게 되었습니다. 이번 글은 특강을 듣고 난 후기가 되겠습니다. 지원하기 1차수, 2차수를 나눠서 뽑습니다. 지난번과는 다르게 이번에는 사전테스트를 진행했습니다. 체감 난이도는 골드 2 ~ 플레5 정도로 매우 어려운 문제들이 출제되었습니다. 기간은 5일 정도로 넉넉했기 때문에 하루에 한 문제를 풀자는 생각으로 테스트에 임했습니다. 저는 총 3문제를 풀고 붙었는데, 한 문제도 안 풀었는데도 붙었다는 분도 계셨습니다. (진짜인지는 모름 ..) 시험 환경에 테스트 보시는 분들이 900명 정도 되었는데, 1차수에는 160명 정도가 있었던 것으로 보아 약 1/3 정도... </summary> </entry> </feed>
