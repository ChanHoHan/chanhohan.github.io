I"AZ<p><a href="https://programmers.co.kr/learn/courses/30/lessons/81303">문제 바로가기</a></p>

<h3 id="자료구조">자료구조</h3>
<ul>
  <li>인덱스 트리(세그먼트 트리)</li>
</ul>

<h3 id="문제-간단-설명">문제 간단 설명</h3>

<p><img src="https://user-images.githubusercontent.com/46598292/129503868-3d6fa8b1-5882-437d-8647-36993ac4ad54.png" width="200" height="400" /></p>

<ul>
  <li>위 표에서, 파란색 칸은 현재 커서의 위치를 의미합니다. 커서는 위, 아래로 이동할 수 있고 커서가 있는 행을 삭제할 수 있습니다.</li>
  <li>가장 최근에 삭제된 행을 원래대로 복구할 수 있습니다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>"U X": 현재 선택된 행에서 X칸 위에 있는 행을 선택합니다.
"D X": 현재 선택된 행에서 X칸 아래에 있는 행을 선택합니다.
"C" : 현재 선택된 행을 삭제한 후, 바로 아래 행을 선택합니다. 단, 삭제된 행이 가장 마지막 행인 경우 바로 윗 행을 선택합니다.
"Z" : 가장 최근에 삭제된 행을 원래대로 복구합니다. 단, 현재 선택된 행은 바뀌지 않습니다.
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="풀이">풀이</h3>

<p>데이터가 있고, 없고를 1과 0으로 표현할 수 있습니다. 처음 상태는 1이고, 명령어 C로 지워진 것들은 0이 됩니다.
(이미지 출처 : <a href="https://tech.kakao.com/2021/07/08/2021-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%9D%B8%ED%84%B4%EC%8B%AD-for-tech-developers-%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%B4%EC%84%A4/">kakao tech</a>)</p>

<p><img src="https://user-images.githubusercontent.com/46598292/129509810-4593a4f8-97ad-483c-86e1-0b82bf1aa506.png" alt="image" /></p>

<p>위 그림에서, 하늘색 부분이 커서라고 합시다. “U 3” 명령을 만났을 때 합이 처음 3이 되는 부분으로 커서가 이동합니다.</p>

<p>이 아이디어로 구현하기 위해, 구간 합을 빠르게 구할 수 있는 <a href="https://www.acmicpc.net/blog/view/9">세그먼트 트리</a>를 사용할 수 있습니다.</p>

<h3 id="명령어별-풀이">명령어별 풀이</h3>
<ul>
  <li>[U, D 명령어] X
현재 커서 위치부터 이동할 수 있는 최대 거리까지를 범위로 잡고 Binary Search를 통해 구간 합이 X가 되는 위치를 구합니다.</li>
  <li>[C 명령어]
현재 커서 위치를 0으로 바꿔줍니다. (이때 필요한 작업은 세그먼트 트리 업데이트). 커서 위치는 Z 명령어를 위해 스택에 저장합니다. 그 후, 커서는 바로 아래 행을 선택해야 하는데, 구간합이 1인 위치를 Binary Search를 통해 찾습니다.</li>
  <li>[Z 명령어]
C 명령어에서 지워진 커서의 위치를 스택에서 꺼낸 다음, 세그먼트 트리를 업데이트 해줍니다.</li>
</ul>

<h3 id="코드">코드</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;stack&gt;
#include &lt;iostream&gt;
</span>
<span class="kt">int</span> <span class="n">table</span><span class="p">[</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">21</span><span class="p">];</span>
<span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">st</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">answer</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">seg_sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">l</span> <span class="o">+=</span> <span class="n">n</span><span class="p">,</span> <span class="n">r</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">l</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">ans</span> <span class="o">+=</span> <span class="n">table</span><span class="p">[</span><span class="n">l</span><span class="o">++</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">ans</span> <span class="o">+=</span> <span class="n">table</span><span class="p">[</span><span class="o">--</span><span class="n">r</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">update</span><span class="p">(</span><span class="kt">int</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">table</span><span class="p">[</span><span class="n">idx</span> <span class="o">+</span> <span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="n">idx</span> <span class="o">+=</span> <span class="n">n</span> <span class="p">;</span> <span class="n">idx</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">idx</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">table</span><span class="p">[</span><span class="n">idx</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">+</span> <span class="n">table</span><span class="p">[</span><span class="n">idx</span> <span class="o">^</span> <span class="mi">1</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">}</span>


<span class="kt">void</span> <span class="nf">init_seg</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
		<span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="o">|</span> <span class="mi">1</span><span class="p">];</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">b_search</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">,</span> <span class="kt">int</span> <span class="n">num</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flag</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">mid</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="n">start</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">while</span> <span class="p">(</span><span class="n">start</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
			<span class="n">val</span> <span class="o">=</span> <span class="n">seg_sum</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;=</span> <span class="n">num</span><span class="p">)</span>
				<span class="n">end</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
			<span class="k">else</span>
				<span class="n">start</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="p">(</span><span class="n">start</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="c1">// up</span>
	<span class="p">{</span>
		<span class="k">while</span> <span class="p">(</span><span class="n">start</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
			<span class="n">val</span> <span class="o">=</span> <span class="n">seg_sum</span><span class="p">(</span><span class="n">mid</span><span class="p">,</span> <span class="n">e</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;=</span> <span class="n">num</span><span class="p">)</span>
				<span class="n">start</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
			<span class="k">else</span>
				<span class="n">end</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="p">(</span><span class="n">end</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">cmd</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">int</span> <span class="n">cmd_size</span> <span class="o">=</span> <span class="n">cmd</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="kt">int</span> <span class="n">num</span><span class="p">,</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">k</span> <span class="p">,</span> <span class="n">how</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">op</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
		<span class="n">answer</span> <span class="o">+=</span> <span class="s">"O"</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
		<span class="n">table</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	<span class="n">init_seg</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cmd_size</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>

		<span class="n">op</span> <span class="o">=</span> <span class="n">cmd</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="s">"D"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
			<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">v</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">d_size</span> <span class="o">=</span> <span class="n">cmd</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
			<span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">d_size</span><span class="p">)</span>
				<span class="n">v</span> <span class="o">+=</span> <span class="n">cmd</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="o">++</span><span class="p">];</span>
			<span class="n">num</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
			<span class="n">cursor</span> <span class="o">=</span> <span class="n">b_search</span><span class="p">(</span><span class="n">cursor</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="s">"U"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
			<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">v</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">d_size</span> <span class="o">=</span> <span class="n">cmd</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
			<span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">d_size</span><span class="p">)</span>
				<span class="n">v</span> <span class="o">+=</span> <span class="n">cmd</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="o">++</span><span class="p">];</span>
			<span class="n">num</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
			<span class="n">cursor</span> <span class="o">=</span> <span class="n">b_search</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">cursor</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="s">"C"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">update</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
			<span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">cursor</span><span class="p">);</span>
			<span class="n">answer</span><span class="p">[</span><span class="n">cursor</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'X'</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">plus_how</span> <span class="o">=</span> <span class="n">b_search</span><span class="p">(</span><span class="n">cursor</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">plus_how</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">plus_how</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span>
				<span class="n">cursor</span> <span class="o">=</span> <span class="n">plus_how</span><span class="p">;</span>
			<span class="k">else</span>
 		               <span class="n">cursor</span> <span class="o">=</span> <span class="n">b_search</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">cursor</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="s">"Z"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kt">int</span> <span class="n">z_val</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
			<span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
			<span class="n">update</span><span class="p">(</span><span class="n">z_val</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
			<span class="n">answer</span><span class="p">[</span><span class="n">z_val</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'O'</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="https://user-images.githubusercontent.com/46598292/129512052-3500de02-7653-4fd3-8e65-df0747ae579f.png" alt="image" /></p>

<h3 id="회고">회고</h3>

<ul>
  <li>재귀를 통한 세그먼트 트리는 시간초과가 났습니다.</li>
</ul>
:ET